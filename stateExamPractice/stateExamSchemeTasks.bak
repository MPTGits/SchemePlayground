#lang racket


(define (decToBinary n)
  (cond
   [(= n 0) '(0)]
   [(= n 1) '(1)]
   [else (append (decToBinary (floor (/ n 2))) (cons (remainder n 2) '()))]))
  

(define (consStream n)
  (stream-cons (decToBinary n) (consStream (+ n 1))))

;Testing section

;Stream testing

(define (infinite n)
  (stream-cons n (infinite (- n 1))))

(define (run p n)
(cond [(> n 0) (printf "~a: ~a\n" n (stream-first p))
(run (stream-rest p) (- n 1))]
[else (display "End\n")]))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;State exam 2014.07.15
;A)

(define (totalMin fLst)
  (foldr (lambda (currEl currResult) (if (< (currEl 0) (currResult 0)) currEl currResult)) (car fLst) fLst))

(define res (totalMin (list (lambda (x) (+ x 2)) (lambda (x) (* x 2)) (lambda (x) (- x 2)) (lambda (x) (+ x 8)))))

;B)

(define (numRange x y)
  (if (> x y) '() (cons x (numRange (+ x 1) y))))

(define (chainMinCompositions p)
  (let* ((f0 (lambda (x) x))
        (f1 (lambda (x) (p x)))
    (minFunc (lambda (mainFunc num) (totalMin (stream->list (stream-take (mainFunc p f1 f0 0) (- num 1)))))))
  (define (compose p n1 n2 n)
    (cond [(= n 0) (stream-cons n2 (compose p  n1 n2 (+ n 1)))]
          [(= n 1) (stream-cons n1 (compose p  n1 n2 (+ n 1)))]
          [(member #f (map (lambda (x) (= (n1 x) (n2 x))) (numRange 0 n))) (stream-cons (lambda (x) (n1 (n2 x))) (compose p n1 (lambda (x) (n1 (n2 x))) (+ n 1)))]
          [else (stream-cons (minFunc (lambda (x y z t) (compose x y z t)) n)  (compose p n1 (minFunc (lambda (x y z t) (compose x y z t)) n) (+ n 1 )))]))
  (compose p f1 f0 0)))
  

(define test (stream->list (stream-take (chainMinCompositions (lambda (x) (if (< x 3) (* x 3) (* x 0)))) 15)))

;State Exam 2014.09.11
 
(define (permutations items)
(if (null? items) '(())
    (apply append (map (lambda (element)
                         (map (lambda (permutation) (cons element permutation)) (permutations (removeEl element items))))
                   items))))
      

(define (removeEl x lst)
  (cond [(null? lst) '()]
        [(= (car lst) x) (cdr lst)]
        [else (cons (car lst) (removeEl x (cdr lst)))]))


;State exam 2015.09.10

(define (merge l1 l2)
  (cond ((null? l1) l2)
        ((null? l2) l1)
        ((< (car l1) (car l2)) (cons (car l1) (merge (cdr l1) l2)))
        (else (cons (car l2) (merge l1 (cdr l2))))))

;((lambda (l) (filter (lambda (y) (even? y)) l)) '(1 2 3 4))

;State Exam 2015.07.14

;(map  
; (car (list (lambda (couple) (+ (car couple) (cdr couple))))) 
;   (apply append '( ( (1 . 2) ) ( (3 . 4) ))))

;Answer: '(3 7)

;(map (lambda (x)  
;             (cons x (list x)))  
;    '(1 2 3 4 5))

;Answer: '((1 1) (2 2) (3 3) (4 4) (5 5))

;(map (lambda (pred) (filter pred '(1 2 3 4 5)))  
;     (list even? odd?))

;Answer: '((2 4) (1 3 5))

;State Exam 2016.07.12

;(map (lambda (x) (append (list x) x) ) '( (1 2) (3 4) ) )

;Answer: (((1 2) 1 2) ((3 4) 3 4))

;(map (lambda (f) (map (lambda (x) (f 5 x)) '(1 2 3) ) ) (list + - *))

;Answer: ((6 7 8) (4 3 2) (5 10 15))

;(apply list (list (quote +) (quote 5) 8) )

;Answer: (+ 5 8)

;State Exam 09.09.2016

(define (filterByElement x m)
  (filter (lambda (lst) (member x lst)) m))

;(filterByElement 2 '((1 2 3) (2 3 4) (3 4 5)))

; (apply + (map (lambda (l) (apply max l) ) '((5 -2) (1 9) (6 -8) )))

;Answer: 20


;State Exam 2018.07.13

(define (addDefault val l) 
  (if (null? l) (list val) l))


(define (sumMinFix f1 xl)
  (apply +
         (map (lambda (f) (apply  min (addDefault 0 (filter (lambda(x) (= (f x) x)) xl)))) f1)))

;(sumMinFix (list (lambda (x) (/ 1 x)) exp (lambda (x) (- (* 2 x) 3))) '(-2 -1 1 3))


;State Exam 2018.09.10

(define (selectList l1 l2)
  (if (> (length l1) (length l2)) l1 l2))

 (define (sumMaxRoots f ll)
   (apply +
         (foldl selectList '()
         (map (lambda (l) (filter (lambda (x) (= (f x) 0)) l)) ll))))

;State Exam 2019.07.09


(define (recommended basket bestFit products)
  (define (findPrice product)
    (cdr (assoc product products)))
  (define basketCost
    (foldr + 0 (map (lambda(x) (findPrice x)) basket)))

  (foldr (lambda(product curr) (if (and (> basketCost (findPrice (bestFit product))) (not (member (bestFit product) basket))) (append curr (list (bestFit product))) curr)) '() basket))


(recommended '("125" "126") (lambda (x) (number->string (+ (string->number x) 1))) (list (cons "123" 5) (cons "125" 2) (cons "124" 6) (cons "126" 6) (cons "127" 7)))
          
